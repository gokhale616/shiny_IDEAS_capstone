#coord_polar("y", start=0) +
facet_grid(~order)
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
#coord_polar("y", start=0) +
facet_grid(~order)
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order)
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order)
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order) +
# make it not look so terrible
geom_text(aes(y = lab.ypos, label = tot), color = "white", size=7.5) +
labs(x="", y="", fill="") + theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order)
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order) +
# make it not look so terrible
geom_text(aes(y = lab.ypos, label = tot/sum(tot)), color = "white", size=7.5) +
labs(x="", y="", fill="") + theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order) +
# make it not look so terrible
labs(x="", y="", fill="") + theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
unique(parDat$order)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla",
"Dasyuromorphia" = "Dasyuromorphia",
"Peramelemorphia" = "Peramelemorphia",
"Rodentia" = "Rodentia"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_grid(~order) +
# make it not look so terrible
labs(x="", y="", fill="") + theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla",
"Dasyuromorphia" = "Dasyuromorphia",
"Peramelemorphia" = "Peramelemorphia",
"Rodentia" = "Rodentia"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_wrap(~order) +
# make it not look so terrible
labs(x="", y="", fill="") + theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla",
"Dasyuromorphia" = "Dasyuromorphia",
"Peramelemorphia" = "Peramelemorphia",
"Rodentia" = "Rodentia"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_wrap(~order) +
# make it not look so terrible
labs(x="", y="", fill="") +
opts(strip.text.x = theme_text(size = 8, colour = "red", angle = 90)) +
theme_void() +
theme(legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "Carnivora",
"Ungulates" = "Artiodactyla",
"Dasyuromorphia" = "Dasyuromorphia",
"Peramelemorphia" = "Peramelemorphia",
"Rodentia" = "Rodentia"),
selected = c("Carnivora", "Artiodactyla")),
plotOutput("plot")
),
server = function(input, output) {
parDat <- read.csv("paige/host-par.csv")
dat <- reactive({
foo <- parDat %>%
filter(order %in% input$mamOrd) %>%
group_by(type, order) %>%
summarise(tot=sum(n)) %>%
arrange(desc(tot)) %>%
# for labels of pie later
mutate(lab.ypos = cumsum(tot) - 0.5*tot) %>%
data.frame()
return(foo)
})
output$plot <- renderPlot(
dat() %>%
# meat of the plot
ggplot(aes(x="", y=tot, fill=type)) +
geom_bar(width = 1, stat = "identity", position="fill", color="black") +
coord_polar("y", start=0) +
facet_wrap(~order) +
# make it not look so terrible
labs(x="", y="", fill="") +
theme_void() +
theme(legend.text=element_text(size=rel(1.5)),
strip.text = element_text(size=25))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlot(
# needs to be evaluated as a string
ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill", color="black") +
labs(x="", y="", fill="")  +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15),
axis.text.y = element_text(size=20),
legend.text=element_text(size=rel(1.5)))
)
}
)
runApp(app)
