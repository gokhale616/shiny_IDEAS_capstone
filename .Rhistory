}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlot(
# needs to be evaluated as a string
ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlot(
# needs to be evaluated as a string
ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("/paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
remove.packages("shiny")
install.packages("shiny")
install.packages("httpuv")
install.packages(c("Rcpp", "httpuv", "shiny"))
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rstudio/httpuv")
install.packages("shiny")
library(shiny)
parRaw <- read_excel("data/Pedersen_et_al_2007_datafile.xls",
sheet = "Host - parasite list", skip = 3)
knitr::opts_chunk$set(warning = FALSE, message=FALSE,
echo=FALSE, fig.height = 6)
library(tidyverse)
library(magrittr)
library(readr)
dat <- read.csv("./data/shiny_data.csv")
dat %<>% filter(Group!="primates")  # just for now bc disease is missing
dat %<>% distinct(HostCorrectedName, .keep_all = TRUE)
parRaw <- read_excel("data/Pedersen_et_al_2007_datafile.xls",
sheet = "Host - parasite list", skip = 3)
parRaw %>% rename(hostSpecies=`MSW 93 Binomial`,
order=Order,
parasite=Parasite,
genus=GENUS,
species=SPECIES,
commonName=COM_NAME,
type=TYPE) %>%
select(-Reference, -`IUCN?`) %>%
mutate(type)
parDat %>%
filter(!is.na(type)) %>%
group_by(order, type) %>%
tally()
getwd
getwd()
parRaw <- read_excel("./data/Pedersen_et_al_2007_datafile.xls",
sheet = "Host - parasite list", skip = 3)
library(readr)
parRaw <- read_excel("./data/Pedersen_et_al_2007_datafile.xls",
sheet = "Host - parasite list", skip = 3)
??read_excel
library(readxl)
parRaw <- read_excel("data/Pedersen_et_al_2007_datafile.xls",
sheet = "Host - parasite list", skip = 3)
parRaw %>% rename(hostSpecies=`MSW 93 Binomial`,
order=Order,
parasite=Parasite,
genus=GENUS,
species=SPECIES,
commonName=COM_NAME,
type=TYPE) %>%
select(-Reference, -`IUCN?`) %>%
mutate(type)
head(parRaw)
parRaw %>% rename(hostSpecies=`MSW 93 Binomial`,
order=Order,
parasite=Parasite,
genus=GENUS,
species=SPECIES,
commonName=COM_NAME,
type=TYPE) %>%
select(-Reference, -`IUCN?`)
?gsub
parRaw %>% rename(hostSpecies=`MSW 93 Binomial`,
order=Order,
parasite=Parasite,
genus=GENUS,
species=SPECIES,
commonName=COM_NAME,
type=TYPE) %>%
select(-Reference, -`IUCN?`) %>%
mutate(type=gsub(pattern = " .*", replacement = "", type))
parRaw %>% rename(hostSpecies=`MSW 93 Binomial`,
order=Order,
parasite=Parasite,
genus=GENUS,
species=SPECIES,
commonName=COM_NAME,
type=TYPE) %>%
select(-Reference, -`IUCN?`) %>%
mutate(type=gsub(pattern = " .*", replacement = "", type)) -> parDat
View(parDat)
parDat %>%
filter(!is.na(type)) %>%
group_by(order, type) %>%
tally()
write.csv(parDat, "paige/host-par.csv")
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlotly(
# needs to be evaluated as a string
ggplotly(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
# The simplest bargraph
library(shiny)
library(tidyverse)
library(magrittr)
library(plotly)
app <- shinyApp(
ui = fluidPage(
checkboxGroupInput(inputId = "mamOrd",
label = "Mammal order:",
choices = c("Carnivores" = "carnivores",
"Ungulates" = "ungulates"),
selected = c("carnivores", "ungulates")),
checkboxGroupInput(inputId = "contin",
label = "Continent:",
choices = c("Africa" = "Africa",
"Asia" = "Asia",
"Australia" = "Australia",
"Europe" = "Europe",
"North America" = "North America"),
selected = c("Africa", "Asia", "Australia", "Europe", "North America")),
selectInput(inputId = "grp",
label = "Grouping variable:",
choices = c("Family" = "HostFamily",
"Environment" = "HostEnvironment")),
plotOutput("plot")
),
server = function(input, output) {
mammals <- read.csv("./paige/distinct-hosts.csv")
dat <- reactive({
foo <- mammals %>%
filter(Group %in% input$mamOrd) %>%
filter(continent %in% input$contin) %>%
# unclear why this .dots arg is neccessary but it is...
group_by(.dots=input$grp, type) %>%
tally() %>% data.frame()
return(foo)
})
output$plot <- renderPlot(
# needs to be evaluated as a string
(ggplot(dat(), aes_string(fill="type", y="n", x=input$grp)) +
geom_bar(stat="identity", position = "fill") +
labs(x="", y="", fill="")  +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 15)))
)
}
)
runApp(app)
parDat <- read.csv("/paige/hosts-par.csv")
parDat <- read.csv("./paige/hosts-par.csv")
getwd()
parDat <- read.csv("paige/hosts-par.csv")
host.par <- read.csv("~/Desktop/shiny_IDEAS_capstone/paige/host-par.csv")
View(host.par)
